name: Build and Release Multi-Platform

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    name: Build macOS Application
    runs-on: macos-latest
    needs: create-release
    steps:
      - name: Get Source Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Output Node.js Version / Rust Version
        run: |
          node --version
          rustc --version

      - name: Install Frontend Dependencies (package-lock.json)
        run: npm ci

      - name: Build Application (arm64)
        run: npm run tauri build

      - name: List Artifact Directory (macOS)
        run: ls src-tauri/target/release/bundle/dmg/

      - name: Get DMG Filename
        run: echo "DMG=$(ls src-tauri/target/release/bundle/dmg/*.dmg)" >> $GITHUB_ENV

      - name: Upload Executable to Release (arm64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.DMG }}
          asset_name: FFmpegGUI-macos-arm64.dmg
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest
    needs: create-release
    steps:
      - name: Get Source Code
        uses: actions/checkout@v4

      - name: Setup Node.js (v20)
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Output Node.js Version / Rust Version
        run: |
          node --version
          rustc --version

      - name: Install Frontend Dependencies (package-lock.json)
        run: npm ci

      - name: Build Application (x86_64)
        run: npm run tauri build

      - name: List Artifact Directory (Windows)
        run: dir src-tauri/target/release/

      - name: Get EXE Filename
        run: echo "EXE=src-tauri/target/release/tauri_ffmpeg_gui.exe" | Add-Content -Path $env:GITHUB_ENV

      - name: Upload Executable to Release (x86_64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.EXE }}
          asset_name: FFmpegGUI-windows-x86_64.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    name: Build Linux AppImage
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Get Source Code
        uses: actions/checkout@v4

      - name: Setup Node.js (v20)
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Linux Dependencies (Ubuntu only)
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf xdg-utils libglib2.0-dev libgirepository1.0-dev pkg-config

      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v2

      - name: Output Node.js Version / Rust Version
        run: |
          node --version
          rustc --version

      - name: Install Frontend Dependencies (package-lock.json)
        run: npm ci

      - name: Build Application
        run: npm run tauri build

      - name: List Artifact Directory (Linux)
        run: ls src-tauri/target/release/

      - name: Get AppImage Filename
        run: echo "APPIMAGE=src-tauri/target/release/tauri_ffmpeg_gui" >> $GITHUB_ENV

      - name: Upload Executable to Release (x86_64)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.APPIMAGE }}
          asset_name: FFmpegGUI-linux-x86_64.AppImage
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
